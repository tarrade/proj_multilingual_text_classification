steps:


# Copy config files
- name: 'gcr.io/cloud-builders/git'
  args: 
  - 'clone'
  - 'https://github.com/tarrade/proj_multilingual_text_classification'
  id: Clone Github


# Set and print env variables for its execution
- name: 'debian'
  args: 
  - 'bash'
  - 'check_env.sh'
  env:
  - 'PROJECT=$PROJECT_ID'
  - 'TAG=${_TAG}'
  - 'DOCKERFILE=${_DOCKERFILE}'
  id: Check env variables
  dir: 'proj_multilingual_text_classification/docker/${_DOCKERFILE}'


- name: 'debian'
  args:
  - 'copy_files.sh'
  env:
  - 'DOCKERFILE=${_DOCKERFILE}'
  id: Copy jupyter lab extensions scrip

# Check the config of Docker
- name: 'gcr.io/cloud-builders/docker'
  args:
  - 'info'
  id: Check the config of Docker


## Restore cache
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args:
    - '-c'
    - 'if [ ${_BUILD} == "true" ]; then docker pull gcr.io/$PROJECT_ID/${_DOCKERFILE}:latest || exit 0; fi'
  id: Restore cache from container registry


## Build docker image with the tag
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args:
    - '-c'
    - 'if [ ${_BUILD} == "true" ]; then docker build -t gcr.io/$PROJECT_ID/${_DOCKERFILE}:${_TAG} -t gcr.io/$PROJECT_ID/${_DOCKERFILE}:latest --cache-from gcr.io/$PROJECT_ID/${_DOCKERFILE}:latest . ; fi'
  id: Build the Docker image
  dir: 'proj_multilingual_text_classification/docker/${_DOCKERFILE}'


## Describe images
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args:
    - '-c'
    - 'if [ ${_BUILD} == "true" ]; then docker image inspect gcr.io/$PROJECT_ID/${_DOCKERFILE}:${_TAG} ; fi'
  id: Describe the images


## Check sizes of the images
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args:
    - '-c'
    - 'if [ ${_BUILD} == "true" ]; then docker images ; fi'
  id: Check sizes of the images


## Push image in Container Registry with a tag and latest
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args:
    - '-c'
    - 'if [ ${_BUILD} == "true" ]; then docker push gcr.io/$PROJECT_ID/${_DOCKERFILE}; fi'
  id: Push the image in ContainerRegistry


## Check if a give tag of an image exist in Container Registry with a given tag
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args:
    - '-c'
    - 'tag=$(gcloud container images list-tags --filter="tags:${_TAG}" --format=json gcr.io/$PROJECT_ID/${_DOCKERFILE}); echo $tag; if [ "$tag" == [] ]; then echo "no tag!"; exit 1; else echo "the tag exist" ; fi'
  id: Check if the tag of the image exist ContainerRegistry

substitutions:
    _TAG: dev
    _DOCKERFILE: derived-pytorch-cpu
    _BUILD: none

options:
  machineType: 'N1_HIGHCPU_8'

timeout: 2h00m0s