steps:

# Clone github repository
- name: 'gcr.io/cloud-builders/git'
  args: 
  - 'clone'
  - 'https://github.com/tarrade/proj_multilingual_text_classification'
  id: 'clone_github'

# python linter script


# Set and print env variables for its execution
- name: 'debian'
  args:
  - 'bash'
  - 'check_env.sh'
  env:
  - 'PROJECT=$PROJECT_ID'
  - 'DOCKERFILE_BASE=${_DOCKERFILE_BASE}'
  - 'TAG=${_TAG}'
  - 'IMAGE_CPU=${_IMAGE_CPU}'
  - 'IMAGE_GPU=${_IMAGE_GPU}'
  - 'BUILD_BASE=${_BUILD_BASE}'
  - 'DOCKERFILE_TRAINING=${_DOCKERFILE_TRAINING}'
  - 'TAG_TRAINING=${_TAG_TRAINING}'
  - 'ENTRYPOINT=${_ENTRYPOINT}'
  id: 'check_env_variables'
  dir: 'proj_multilingual_text_classification/docker'

## step 1: base CPU
# Copy configuration files
- name: 'debian'
  args:
  - 'bash'
  - 'proj_multilingual_text_classification/docker/copy_files.sh'
  env:
  - 'DOCKERFILE=${_DOCKERFILE_BASE}'
  id: 'copy_files_cpu'

# Check the config of Docker
- name: 'gcr.io/cloud-builders/docker'
  args:
  - 'info'
  id: 'check_config_docker_cpu'
  waitFor: ['copy_files_cpu']

## Restore cache
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args:
    - '-c'
    - 'if [ ${_BUILD_BASE} == "true" ]; then docker pull gcr.io/$PROJECT_ID/${_DOCKERFILE_BASE}_cpu:latest || exit 0; fi'
  id: 'restore_cache_from_container_registry_cpu'
  waitFor: ['check_config_docker_cpu']

## Build docker image with the tag
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args:
    - '-c'
    - 'if [ ${_BUILD_BASE} == "true" ]; then docker build -t gcr.io/$PROJECT_ID/${_DOCKERFILE_BASE}_cpu:${_TAG} -t gcr.io/$PROJECT_ID/${_DOCKERFILE_BASE}_cpu:latest --build-arg IMAGE=${_IMAGE_CPU} --cache-from gcr.io/$PROJECT_ID/${_DOCKERFILE_BASE}_cpu:latest . ; fi'
  id: 'build_docker_image_cpu'
  dir: 'proj_multilingual_text_classification/docker/${_DOCKERFILE_BASE}'
  waitFor: ['restore_cache_from_container_registry_cpu']

## Push image in Container Registry with a tag and latest
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args:
    - '-c'
    - 'if [ ${_BUILD_BASE} == "true" ]; then docker push gcr.io/$PROJECT_ID/${_DOCKERFILE_BASE}_cpu; fi'
  id: 'push_image_container_registry_cpu'
  waitFor: ['build_docker_image_cpu']

## Check if a give tag of an image exist in Container Registry with a given tag
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args:
    - '-c'
    - 'tag=$(gcloud container images list-tags --filter="tags:${_TAG}" --format=json gcr.io/$PROJECT_ID/${_DOCKERFILE_BASE}_cpu); echo $tag; if [ "$tag" == [] ]; then echo "no tag!"; exit 1; else echo "the tag exist" ; fi'
  id: 'check_tag_image_exist_container_registry_cpu'
  waitFor: ['push_image_container_registry_cpu']
## end step 1: base CPU

## step 2: base GPU
# Copy configuration files
- name: 'debian'
  args:
  - 'bash'
  - 'proj_multilingual_text_classification/docker/copy_files.sh'
  env:
  - 'DOCKERFILE_BASE=${_DOCKERFILE_BASE}'
  id: 'copy_files_gpu'
  waitFor: ['-'] # run in parallel os task 2

# Check the config of Docker
- name: 'gcr.io/cloud-builders/docker'
  args:
  - 'info'
  id: 'check_config_docker_gpu'
  waitFor: ['copy_files_gpu']

# Restore cache
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args:
    - '-c'
    - 'if [ ${_BUILD_BASE} == "true" ]; then docker pull gcr.io/$PROJECT_ID/${_DOCKERFILE_BASE}_gpu:latest || exit 0; fi'
  id: 'restore_cache_from_container_registry_gpu'
  waitFor: ['check_config_docker_gpu']

# Build docker image with the tag
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args:
    - '-c'
    - 'if [ ${_BUILD_BASE} == "true" ]; then docker build -t gcr.io/$PROJECT_ID/${_DOCKERFILE_BASE}_gpu:${_TAG} -t gcr.io/$PROJECT_ID/${_DOCKERFILE_BASE}_gpu:latest --build-arg IMAGE=${_IMAGE_GPU} --cache-from gcr.io/$PROJECT_ID/${_DOCKERFILE_BASE}_gpu:latest . ; fi'
  id: 'build_docker_image_gpu'
  dir: 'proj_multilingual_text_classification/docker/${_DOCKERFILE_BASE}'
  waitFor: ['restore_cache_from_container_registry_gpu']

# Push image in Container Registry with a tag and latest
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args:
    - '-c'
    - 'if [ ${_BUILD_BASE} == "true" ]; then docker push gcr.io/$PROJECT_ID/${_DOCKERFILE_BASE}_gpu; fi'
  id: 'push_image_container_registry_gpu'
  waitFor: ['build_docker_image_gpu']

# Check if a give tag of an image exist in Container Registry with a given tag
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args:
    - '-c'
    - 'tag=$(gcloud container images list-tags --filter="tags:${_TAG}" --format=json gcr.io/$PROJECT_ID/${_DOCKERFILE_BASE}_gpu); echo $tag; if [ "$tag" == [] ]; then echo "no tag!"; exit 1; else echo "the tag exist" ; fi'
  id: 'check_tag_image_exist_container_registry_gpu'
  waitFor: ['push_image_container_registry_gpu']
## end step 2: base GPU

## step 3: check size base container
# Check sizes of the images
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args:
    - '-c'
    - 'if [ ${_BUILD_BASE} == "true" ]; then docker images ; fi'
  id: 'check_size_all_base_images'
  waitFor: ['check_tag_image_exist_container_registry_gpu','check_tag_image_exist_container_registry_cpu']
# end step 3: check size base container

## step 4: entrypoint for base CPU
# Copy configuration files
- name: 'debian'
  args:
  - 'bash'
  - 'proj_multilingual_text_classification/docker/copy_files.sh'
  env:
  - 'DOCKERFILE=${_DOCKERFILE_TRAINING}'
  id: 'copy_files_training_cpu'
  waitFor: ['check_size_all_base_images']

# Restore cache
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args:
    - '-c'
    - 'docker pull gcr.io/$PROJECT_ID/${_DOCKERFILE_TRAINING}_cpu:latest || exit 0'
  id: 'restore_cache_from_container_registry_training_cpu'
  waitFor: ['copy_files_training_cpu']

# Build docker image with the tag
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args:
    - '-c'
    - 'docker build -t gcr.io/$PROJECT_ID/${_DOCKERFILE_TRAINING}_cpu:${_TAG_TRAINING}_${_TAG} -t gcr.io/$PROJECT_ID/${_DOCKERFILE_TRAINING}_cpu:latest --build-arg IMAGE=${_DOCKERFILE_BASE}_cpu:${_TAG} --build-arg PROJECT=$PROJECT_ID --build-arg ENTRYPOINT=${_ENTRYPOINT} --cache-from gcr.io/$PROJECT_ID/${_DOCKERFILE_TRAINING}_cpu:latest .'
  id: 'build_docker_image_training_cpu'
  dir: 'proj_multilingual_text_classification/docker/${_DOCKERFILE_TRAINING}'
  waitFor: ['restore_cache_from_container_registry_training_cpu']

# Push image in Container Registry with a tag and latest
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args:
    - '-c'
    - 'docker push gcr.io/$PROJECT_ID/${_DOCKERFILE_TRAINING}_cpu'
  id: 'push_image_container_registry_training_cpu'
  waitFor: ['build_docker_image_training_cpu']

# Check if a give tag of an image exist in Container Registry with a given tag
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args:
    - '-c'
    - 'tag=$(gcloud container images list-tags --filter="tags:${_TAG_TRAINING}${_TAG}" --format=json gcr.io/$PROJECT_ID/${_DOCKERFILE_TRAINING}_cpu); echo $tag; if [ "$tag" == [] ]; then echo "no tag!"; exit 1; else echo "the tag exist" ; fi'
  id: 'check_tag_image_exist_container_registry_training_cpu'
  waitFor: ['push_image_container_registry_training_cpu']
## end step 4: entrypoint for base CPU

## step 5: entrypoint for base GPU
# Copy configuration files
- name: 'debian'
  args:
  - 'bash'
  - 'proj_multilingual_text_classification/docker/copy_files.sh'
  env:
  - 'DOCKERFILE=${_DOCKERFILE_TRAINING}'
  id: 'copy_files_training_gpu'
  waitFor: ['check_size_all_base_images']

# Restore cache
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args:
    - '-c'
    - 'docker pull gcr.io/$PROJECT_ID/${_DOCKERFILE_TRAINING}_gpu:latest || exit 0'
  id: 'restore_cache_from_container_registry_training_gpu'
  waitFor: ['copy_files_training_gpu']

# Build docker image with the tag
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args:
    - '-c'
    - 'docker build -t gcr.io/$PROJECT_ID/${_DOCKERFILE_TRAINING}_gpu:${_TAG_TRAINING}_${_TAG} -t gcr.io/$PROJECT_ID/${_DOCKERFILE_TRAINING}_gpu:latest --build-arg IMAGE=${_DOCKERFILE_BASE}_gpu:${_TAG} --build-arg PROJECT=$PROJECT_ID --build-arg ENTRYPOINT=${_ENTRYPOINT} --cache-from gcr.io/$PROJECT_ID/${_DOCKERFILE_TRAINING}_gpu:latest .'
  id: 'build_docker_image_training_gpu'
  dir: 'proj_multilingual_text_classification/docker/${_DOCKERFILE_TRAINING}'
  waitFor: ['restore_cache_from_container_registry_training_gpu']

# Push image in Container Registry with a tag and latest
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args:
    - '-c'
    - 'docker push gcr.io/$PROJECT_ID/${_DOCKERFILE_TRAINING}_gpu'
  id: 'push_image_container_registry_training_gpu'
  waitFor: ['build_docker_image_training_gpu']

# Check if a give tag of an image exist in Container Registry with a given tag
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args:
    - '-c'
    - 'tag=$(gcloud container images list-tags --filter="tags:${_TAG_TRAINING}_${_TAG}" --format=json gcr.io/$PROJECT_ID/${_DOCKERFILE_TRAINING}_gpu); echo $tag; if [ "$tag" == [] ]; then echo "no tag!"; exit 1; else echo "the tag exist" ; fi'
  id: 'check_tag_image_exist_container_registry_training_gpu'
  waitFor: ['push_image_container_registry_training_gpu']
## end step 5: entrypoint for base GPU

## final step
# Check sizes of the images
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args:
    - '-c'
    - 'docker images'
  id: 'check_size_all_images'
  waitFor: ['check_tag_image_exist_container_registry_training_cpu','check_tag_image_exist_container_registry_training_gpu']

# test unit

# run full training on 2 events

substitutions:
    _IMAGE_CPU: tf2-cpu:m49
    _IMAGE_GPU: tf2-gpu:m49
    _TAG: dev
    _DOCKERFILE_BASE: base_container
    _DOCKERFILE_TRAINING: model_training
    _BUILD_BASE: none
    _ENTRYPOINT: model.tf_bert_classification.task
    _TAG_TRAINING: tf_bert_class

options:
  machineType: 'N1_HIGHCPU_8'

timeout: 2h00m0s