# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.7
      uses: actions/setup-python@v2
      with:
        python-version: 3.7
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pylint pycodestyle pydocstyle mypy bandit safety
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --ignore E501
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --ignore E501
    - name: Safety
      run: |
        safety check
    - name: Pylint
      run: |
        pylint src --exit-zero
    - name: Pycodestyle
      run: |
        FAILURE=false
        pycodestyle src --max-line-length=130 --ignore=E203,W503 --statistics --count || FAILURE=true
    - name: Pydocstyle
      run: |
        FAILURE=false
        pydocstyle src --convention=numpy --add-ignore=D102,D103,D104,D105,D200,D205,D400 || FAILURE=true
    - name: Mypy
      run: |
        FAILURE=false 
        mypy src || FAILURE=true
    - name: Bandit
      run: |
        bandit -lll -r src --format custom
    - name: Lint and other checks
      run: |
        #!/bin/bash
        set -uo pipefail
        set +e
        FAILURE=false
        
        echo "safety"
        safety check || FAILURE=true
       
        echo "pylint"
        pylint src || FAILURE=true
        
        echo "pycodestyle"
        pycodestyle src --max-line-length=130 --ignore=E203,W503 --statistics --count || FAILURE=true
        
        echo "pydocstyle"
        pydocstyle src --convention=numpy --add-ignore=D102,D103,D104,D105,D200,D205,D400 || FAILURE=true
        
        echo "mypy"
        mypy src --show-error-codes || FAILURE=true
        
        echo "bandit"
        bandit -lll -r src --format custom  || FAILURE=true
        
        if [ "$FAILURE" = true ]; then
          echo "Linting failed"
          exit 0
        fi
        echo "Linting passed"
        exit 0
        
    - name: Test with pytest
      run: |
        python -m pytest test/pytest_examples.py
